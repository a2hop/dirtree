name: Build and Release

on:
  release:
    types: [created, published]
  push:
    branches: [main]
    paths:
      - 'dirtree.c'
      - 'Makefile'
      - '.github/workflows/build_and_release.yml'
  workflow_dispatch:
    inputs:
      publish_binaries:
        description: 'Publish binaries to release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make mingw-w64
      
      - name: Build executables
        run: |
          make clean
          make
          x86_64-w64-mingw32-gcc -o dirtree.exe dirtree.c -static
      
      - name: Prepare artifacts
        run: |
          chmod +x dirtree
          cp dirtree dirtree-linux
          cp dirtree.exe dirtree-windows.exe
          zip dirtree-linux.zip dirtree
          zip dirtree-windows.zip dirtree.exe
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: |
            dirtree-linux
            dirtree-windows.exe
            dirtree-linux.zip
            dirtree-windows.zip
  
  update-releases:
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_binaries == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: ./
      
      - name: Set executable permissions
        run: chmod +x dirtree-linux
      
      - name: Update releases
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            async function uploadAsset(releaseId, filePath, fileName, contentType) {
              try {
                console.log(`Reading file: ${filePath}`);
                const data = fs.readFileSync(filePath);
                
                console.log(`Uploading ${fileName} (${data.length} bytes) to release ${releaseId}`);
                const response = await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId,
                  name: fileName,
                  data: data,
                  headers: {
                    'content-type': contentType,
                    'content-length': data.length
                  }
                });
                
                console.log(`Successfully uploaded ${fileName}`);
                return response;
              } catch (error) {
                console.error(`Error uploading ${fileName}: ${error.message}`);
                throw error;
              }
            }
            
            async function updateRelease(releaseId, isLatestTag) {
              if (!releaseId) return;
              
              console.log(`Processing release ID: ${releaseId}, isLatestTag: ${isLatestTag}`);
              
              const releaseInfo = await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });
              
              const assets = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId
              });
              
              const assetNames = ['dirtree-linux.zip', 'dirtree-windows.zip', 'dirtree-linux', 'dirtree-windows.exe'];
              
              for (const asset of assets.data) {
                if (assetNames.includes(asset.name)) {
                  console.log(`Deleting existing asset: ${asset.name} (ID: ${asset.id})`);
                  await github.rest.repos.deleteReleaseAsset({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    asset_id: asset.id
                  });
                }
              }
              
              const files = [
                { path: 'dirtree-linux.zip', name: 'dirtree-linux.zip', contentType: 'application/zip' },
                { path: 'dirtree-windows.zip', name: 'dirtree-windows.zip', contentType: 'application/zip' },
                { path: 'dirtree-linux', name: 'dirtree-linux', contentType: 'application/octet-stream' },
                { path: 'dirtree-windows.exe', name: 'dirtree-windows.exe', contentType: 'application/octet-stream' }
              ];
              
              for (const file of files) {
                await uploadAsset(releaseId, file.path, file.name, file.contentType);
              }
              
              let body, name;
              
              if (isLatestTag) {
                name = 'Latest Build';
                body = `This is an automatically updated release containing the latest build.\nLast updated: ${new Date().toISOString()}\nCommit: ${{ github.event.head_commit.message || 'Manual workflow run' }}`;
              } else {
                name = releaseInfo.data.name;
                body = releaseInfo.data.body || '';
                
                if (!body.includes('Binaries updated:')) {
                  body += `\n\n---\nBinaries updated: ${new Date().toISOString()}`;
                } else {
                  body = body.replace(/Binaries updated:.*/, `Binaries updated: ${new Date().toISOString()}`);
                }
              }
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: name,
                body: body
              });
              
              console.log(`Successfully updated release: ${name}`);
            }
            
            try {
              if ('${{ github.event_name }}' === 'release') {
                const releaseId = ${{ github.event.release.id || 'null' }};
                if (releaseId) {
                  await updateRelease(releaseId, false);
                  console.log('Updated release assets for the current release');
                }
              } else {
                let latestTagReleaseId = null;
                let mostRecentReleaseId = null;
                
                try {
                  const latestTagRelease = await github.rest.repos.getReleaseByTag({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag: 'latest'
                  });
                  
                  latestTagReleaseId = latestTagRelease.data.id;
                  console.log(`Found existing "latest" tag release: ${latestTagReleaseId}`);
                } catch (error) {
                  console.log('No "latest" tag release found, will create one');
                  
                  const newRelease = await github.rest.repos.createRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    tag_name: 'latest',
                    name: 'Latest Build',
                    body: `This is an automatically updated release containing the latest build.\nLast updated: ${new Date().toISOString()}\nCommit: ${{ github.event.head_commit.message || 'Manual workflow run' }}`,
                    draft: false,
                    prerelease: false
                  });
                  
                  latestTagReleaseId = newRelease.data.id;
                  console.log(`Created new "latest" tag release: ${latestTagReleaseId}`);
                }
                
                const releases = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 10
                });
                
                for (const release of releases.data) {
                  if (release.tag_name !== 'latest' && release.id !== latestTagReleaseId) {
                    mostRecentReleaseId = release.id;
                    console.log(`Found most recent regular release: ${release.name} (${release.tag_name}), ID: ${mostRecentReleaseId}`);
                    break;
                  }
                }
                
                await updateRelease(latestTagReleaseId, true);
                
                if (mostRecentReleaseId && mostRecentReleaseId !== latestTagReleaseId) {
                  await updateRelease(mostRecentReleaseId, false);
                }
              }
              
              console.log('All release updates completed successfully');
              
            } catch (error) {
              core.setFailed(`Error updating releases: ${error.message}`);
              console.error(error);
            }
